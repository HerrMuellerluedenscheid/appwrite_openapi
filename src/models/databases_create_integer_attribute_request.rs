/*
 * Appwrite
 *
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.4.9
 * Contact: team@appwrite.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabasesCreateIntegerAttributeRequest {
    /// Attribute Key.
    #[serde(rename = "key")]
    pub key: String,
    /// Is attribute required?
    #[serde(rename = "required")]
    pub required: bool,
    /// Minimum value to enforce on new documents
    #[serde(rename = "min", skip_serializing_if = "Option::is_none")]
    pub min: Option<i32>,
    /// Maximum value to enforce on new documents
    #[serde(rename = "max", skip_serializing_if = "Option::is_none")]
    pub max: Option<i32>,
    /// Default value for attribute when not provided. Cannot be set when attribute is required.
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<i32>,
    /// Is attribute an array?
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<bool>,
}

impl DatabasesCreateIntegerAttributeRequest {
    pub fn new(key: String, required: bool) -> DatabasesCreateIntegerAttributeRequest {
        DatabasesCreateIntegerAttributeRequest {
            key,
            required,
            min: None,
            max: None,
            default: None,
            array: None,
        }
    }
}


