/*
 * Appwrite
 *
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.4.9
 * Contact: team@appwrite.io
 * Generated by: https://openapi-generator.tech
 */

/// Deployment : Deployment



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Deployment {
    /// Deployment ID.
    #[serde(rename = "$id")]
    pub dollar_id: String,
    /// Deployment creation date in ISO 8601 format.
    #[serde(rename = "$createdAt")]
    pub dollar_created_at: String,
    /// Deployment update date in ISO 8601 format.
    #[serde(rename = "$updatedAt")]
    pub dollar_updated_at: String,
    /// Type of deployment.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Resource ID.
    #[serde(rename = "resourceId")]
    pub resource_id: String,
    /// Resource type.
    #[serde(rename = "resourceType")]
    pub resource_type: String,
    /// The entrypoint file to use to execute the deployment code.
    #[serde(rename = "entrypoint")]
    pub entrypoint: String,
    /// The code size in bytes.
    #[serde(rename = "size")]
    pub size: i32,
    /// The current build ID.
    #[serde(rename = "buildId")]
    pub build_id: String,
    /// Whether the deployment should be automatically activated.
    #[serde(rename = "activate")]
    pub activate: bool,
    /// The deployment status. Possible values are \"processing\", \"building\", \"waiting\", \"ready\", and \"failed\".
    #[serde(rename = "status")]
    pub status: String,
    /// The build logs.
    #[serde(rename = "buildLogs")]
    pub build_logs: String,
    /// The current build time in seconds.
    #[serde(rename = "buildTime")]
    pub build_time: i32,
    /// The name of the vcs provider repository
    #[serde(rename = "providerRepositoryName")]
    pub provider_repository_name: String,
    /// The name of the vcs provider repository owner
    #[serde(rename = "providerRepositoryOwner")]
    pub provider_repository_owner: String,
    /// The url of the vcs provider repository
    #[serde(rename = "providerRepositoryUrl")]
    pub provider_repository_url: String,
    /// The branch of the vcs repository
    #[serde(rename = "providerBranch")]
    pub provider_branch: String,
    /// The commit hash of the vcs commit
    #[serde(rename = "providerCommitHash")]
    pub provider_commit_hash: String,
    /// The url of vcs commit author
    #[serde(rename = "providerCommitAuthorUrl")]
    pub provider_commit_author_url: String,
    /// The name of vcs commit author
    #[serde(rename = "providerCommitAuthor")]
    pub provider_commit_author: String,
    /// The commit message
    #[serde(rename = "providerCommitMessage")]
    pub provider_commit_message: String,
    /// The url of the vcs commit
    #[serde(rename = "providerCommitUrl")]
    pub provider_commit_url: String,
    /// The branch of the vcs repository
    #[serde(rename = "providerBranchUrl")]
    pub provider_branch_url: String,
}

impl Deployment {
    /// Deployment
    pub fn new(dollar_id: String, dollar_created_at: String, dollar_updated_at: String, r#type: String, resource_id: String, resource_type: String, entrypoint: String, size: i32, build_id: String, activate: bool, status: String, build_logs: String, build_time: i32, provider_repository_name: String, provider_repository_owner: String, provider_repository_url: String, provider_branch: String, provider_commit_hash: String, provider_commit_author_url: String, provider_commit_author: String, provider_commit_message: String, provider_commit_url: String, provider_branch_url: String) -> Deployment {
        Deployment {
            dollar_id,
            dollar_created_at,
            dollar_updated_at,
            r#type,
            resource_id,
            resource_type,
            entrypoint,
            size,
            build_id,
            activate,
            status,
            build_logs,
            build_time,
            provider_repository_name,
            provider_repository_owner,
            provider_repository_url,
            provider_branch,
            provider_commit_hash,
            provider_commit_author_url,
            provider_commit_author,
            provider_commit_message,
            provider_commit_url,
            provider_branch_url,
        }
    }
}


