/*
 * Appwrite
 *
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 1.4.9
 * Contact: team@appwrite.io
 * Generated by: https://openapi-generator.tech
 */

/// AttributeRelationship : AttributeRelationship



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttributeRelationship {
    /// Attribute Key.
    #[serde(rename = "key")]
    pub key: String,
    /// Attribute type.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`
    #[serde(rename = "status")]
    pub status: String,
    /// Error message. Displays error generated on failure of creating or deleting an attribute.
    #[serde(rename = "error")]
    pub error: String,
    /// Is attribute required?
    #[serde(rename = "required")]
    pub required: bool,
    /// Is attribute an array?
    #[serde(rename = "array", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub array: Option<Option<bool>>,
    /// The ID of the related collection.
    #[serde(rename = "relatedCollection")]
    pub related_collection: String,
    /// The type of the relationship.
    #[serde(rename = "relationType")]
    pub relation_type: String,
    /// Is the relationship two-way?
    #[serde(rename = "twoWay")]
    pub two_way: bool,
    /// The key of the two-way relationship.
    #[serde(rename = "twoWayKey")]
    pub two_way_key: String,
    /// How deleting the parent document will propagate to child documents.
    #[serde(rename = "onDelete")]
    pub on_delete: String,
    /// Whether this is the parent or child side of the relationship
    #[serde(rename = "side")]
    pub side: String,
}

impl AttributeRelationship {
    /// AttributeRelationship
    pub fn new(key: String, r#type: String, status: String, error: String, required: bool, related_collection: String, relation_type: String, two_way: bool, two_way_key: String, on_delete: String, side: String) -> AttributeRelationship {
        AttributeRelationship {
            key,
            r#type,
            status,
            error,
            required,
            array: None,
            related_collection,
            relation_type,
            two_way,
            two_way_key,
            on_delete,
            side,
        }
    }
}


